{
    environment: {
        work_dir: "embeddings_validation.work"
    }

    target: {
        file_name: "../data/train_target.csv"
        cols_id: [app_id]
        cols_id_type: [int]
        col_target: flag
        drop_duplicated_ids: false
    }

    split: {
        fit_ids: true

        train_id: {
            file_name: "../data/train_target.csv"
            drop_duplicated_ids: false
        }
        test_id: {
            file_name: "../data/test_ids.csv"
        }

        cv_split_count: 5
        is_stratify: true
        random_state: 42
    }

    models: {
        linear: {
            enabled: false
            cls_name: sklearn.linear_model.LogisticRegression
            params: {},
            cpu_count: 1
            preprocessing: [
                [sklearn.preprocessing.MaxAbsScaler, {}]
            ]
        }
        lgbm: {
            enabled: true
            cls_name: lightgbm.LGBMClassifier,
            params: {
                n_estimators: 500
                boosting_type: gbdt
                objective: binary
                metric: auc
                subsample: 0.5
                subsample_freq: 1
                learning_rate: 0.02
                feature_fraction: 0.75
                max_depth: 6
                lambda_l1: 1
                lambda_l2: 1
                min_data_in_leaf: 50
                random_state: 42
                n_jobs: 8
                reg_alpha: null
                reg_lambda: null
                colsample_bytree: null
                min_child_samples: null
            },
            cpu_count: 8
            preprocessing: [
                [sklearn.preprocessing.MaxAbsScaler, {}]
            ]
        }
        xgb: {
            enabled: false
            cls_name: xgboost.XGBClassifier
            params: {
                n_jobs=4,
                seed=42,
                n_estimators=300,
            },
            cpu_count: 4
            preprocessing: [
                [sklearn.preprocessing.MaxAbsScaler, {}]
            ]
        }
    }

    metrics: {
        auroc: {
            enabled: true
            score_func: sklearn.metrics.roc_auc_score
            scorer_params: {needs_proba: true}
        }
    }
}
