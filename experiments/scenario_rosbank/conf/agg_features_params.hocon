{
  data_module: {
    type: map
    setup: {
      col_id: cl_id
      dataset_files: {
        data_path: "data/train_trx.parquet"
      }
      split_by: files
      valid_size: 0.05
      valid_split_seed: 42
    }
    train: {
      min_seq_len: 25
      augmentations: [
        [DropoutTrx, {trx_dropout: 0.01}]
        [SeqLenLimit, {max_seq_len: 1200}]
      ]
      num_workers: 8
      batch_size: 128
      split_strategy: {
        split_strategy: "SampleSlices"
        split_count: 5
        cnt_min: 15
        cnt_max: 75
      }
    }
    valid: {
      augmentations: [
        [SeqLenLimit, {max_seq_len: 1200}]
      ]
      num_workers: 16
      batch_size: 1024
      split_strategy: {
        split_strategy: SampleSlices
        split_count: 5
        cnt_min: 15
        cnt_max: 75
      }
    }
  }

  seed_everything: 42
  trainer: {
    gpus: 1
    auto_select_gpus: 1

    max_epochs: 10

    checkpoint_callback: false
    deterministic: true
  }
  logger_name: agg_features_model

  params: {
    data_module_class: dltranz.data_load.data_module.coles_data_module.ColesDataModuleTrain
    pl_module_class: dltranz.lightning_modules.coles_module.CoLESModule

    validation_metric_params: {
        K: 4
        metric: cosine
    }

    encoder_type: agg_features
    trx_encoder: {
      embeddings: {
        mcc: {in: 100},
        channel_type: {in: 4},
        currency: {in: 4},
        trx_category: {in: 10}
      },
      numeric_values: {
        amount: identity
      }
      was_logified: true
      log_scale_factor: 1
    },
    use_normalization_layer: true,
    norm_scores: false,
    lr_scheduler: {
      step_size: 10,
      step_gamma: 0.9025
    },
    head_layers: [
        [BatchNorm1d, {num_features: "{seq_encoder.embedding_size}"}]
        [NormEncoder, {}],
    ]

    train: {
      sampling_strategy: HardNegativePair,
      neg_count: 5,
      loss: MarginLoss,
      margin: 0.2,
      beta: 0.4,
      lr: 0.002,
      weight_decay: 0.0,
    }
  }

  model_path: "models/agg_features_model.p"

  include "dataset_inference_file.hocon"

  output: {
    path: data/agg_feat_embed
    format: pickle
  }
}
