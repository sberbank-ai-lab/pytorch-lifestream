{
  data_module: {
    type: map
    setup: {
      col_id: cl_id
      dataset_files: {
        data_path: "data/train_trx.parquet"
      }
      split_by: files
      valid_size: 0.05
      valid_split_seed: 42
    }
    train: {
      min_seq_len: 25
      split_strategy: {
        split_strategy: "SampleSlices"
        split_count: 5
        cnt_min: 30
        cnt_max: 300
      }
      augmentations: [
        [DropoutTrx, {trx_dropout: 0.01}],
        [SeqLenLimit, {max_seq_len: 1200}]
      ]
      num_workers: 8
      batch_size: 128
    }
    valid: {
      split_strategy: {
        split_strategy: SampleSlices
        split_count: 5
        cnt_min: 30
        cnt_max: 300
      }
      augmentations: []
      num_workers: 16
      batch_size: 256
    }
  }

  seed_everything: 42
  trainer: {
    gpus: 1
    auto_select_gpus: False

    max_epochs: 100

    deterministic: true
  }
  logger_name: sop_model

  params: {
    data_module_class: dltranz.data_load.data_module.sop_data_module.SopDataModuleTrain
    pl_module_class: dltranz.lightning_modules.sop_nsp_module.SopNspModule

    encoder_type: rnn,
    rnn: {
      type: lstm,
      hidden_size: 128,
      bidir: False,
      trainable_starter: static
    },
    trx_encoder: {
      norm_embeddings: False,
      embeddings_noise: 0.0003,
      embeddings: {
        mcc: {in: 100, out: 24},
        channel_type: {in: 4, out: 4},
        currency: {in: 4, out: 4},
        trx_category: {in: 10, out: 4}
      },
      numeric_values: {
        amount: identity
      }
    },
    use_normalization_layer: true,
    norm_scores: False,
    score_metric: auroc,
    head: {
      hidden_size: 512,
      drop_p: 0.5,
      pred_all_states: False
    },

    lr_scheduler: {
      ReduceLROnPlateau: true,
      patience: 10
    },
    train: {
      loss: bce
      lr: 0.001,
      weight_decay: 0.0,
      use_best_epoch: true
    }
  }

  model_path: "models/sop_model.p"

  include "dataset_inference_file.hocon"

  output: {
    path: data/sop_embeddings,
    format: pickle,
  }
}
