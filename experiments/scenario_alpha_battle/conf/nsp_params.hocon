{
  data_module: {
    type: iterable
    setup: {
      col_id: app_id
      dataset_files: {
        data_path: "data/train_trx.parquet"
      }
      split_by: files
      valid_size: 0.05
      valid_split_seed: 42
    }
    train: {
      min_seq_len: 30
      buffer_size: 10000
      split_strategy: {
        split_strategy: "SampleSlices"
        split_count: 5
        cnt_min: 30
        cnt_max: 220
      }
      augmentations: [
        [DropoutTrx, {trx_dropout: 0.01}]
      ]
      num_workers: 8
      batch_size: 128
    }
    valid: {
      split_strategy: {
        split_strategy: SampleSlices
        split_count: 5
        cnt_min: 30
        cnt_max: 220
      }
      augmentations: []
      num_workers: 16
      batch_size: 256
    }
  }
  logger_name: nsp_model

  seed_everything: 42
  trainer: {
    gpus: 1
    auto_select_gpus: false

    max_epochs: 30

    deterministic: True
  }

  params: {
    data_module_class: dltranz.data_load.data_module.nsp_data_module.NspDataModuleTrain
    pl_module_class: dltranz.lightning_modules.sop_nsp_module.SopNspModule

    encoder_type: rnn,
    trx_encoder: {
      norm_embeddings: false,
      embeddings_noise: 0.003,
      embeddings: {
        currency: {in: 13, out: 2}
        operation_kind: {in: 9, out: 2}
        card_type: {in: 177, out: 0}
        operation_type: {in: 24, out: 4}
        operation_type_group: {in: 6, out: 32}
        ecommerce_flag: {in: 5, out: 1}
        payment_system: {in: 9, out: 4}
        income_flag: {in: 5, out: 1}
        mcc: {in: 110, out: 32}
        country: {in: 26, out: 0}
        city: {in: 163, out: 0}
        mcc_category: {in: 30, out: 16}
        day_of_week: {in: 9, out: 2}
        hour: {in: 25, out: 4}
        weekofyear: {in: 55, out: 4}
      },
      numeric_values: {
        amnt: identity
        hour_diff: log
      }
    },
    rnn: {
      type: gru,
      hidden_size: 512,
      bidir: false,
      trainable_starter: static
    },
    head: {
      hidden_size: 1024,
      drop_p: 0.5,
      pred_all_states: false
    },

    lr_scheduler: {
      ReduceLROnPlateau: true,
      patience: 2
    },
    train: {
      lr: 0.001,
      weight_decay: 0.0
      checkpoints_every_n_val_epochs: 1
    }
  }

  model_path: "models/nsp_model.p"

  include "dataset_inference_file.hocon"

  output: {
    path: data/nsp_embeddings,
    format: pickle,
  }
}
